{"version":3,"sources":["components/Playables.js","reducers/reducer.js","actions/evaluateGamePlay.js","container/GameContainer.js","components/Game.js","App.js","serviceWorker.js","index.js","constants/constants.js"],"names":["style","height","position","humanStyle","width","display","padding","computerStyle","playItems","rulesTable","stateData","i","length","push","reducer","combineReducers","gameState","state","arguments","undefined","action","type","EVALUATE_GAME_ITEM","stateCopy","evaluate","item","code","s","Object","toConsumableArray","indexOf","name","point","evaluateGamePlay","Math","ceil","random","GameContainer","connect","dispatch","onSelect","props","humanPlayColumn","computerCodeColumn","hwin","reduce","accumulator","currentValue","cwin","react_default","a","createElement","className","onClick","window","setInterval","idx","floor","start","map","index","filename","key","humanClassName","computerClassName","src","alt","fontStyle","color","Game","container_GameContainer","backgroundColor","App","components_Game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.17eea8be.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\"height\": \"65px\", \"position\": \"relative\"};\nvar humanStyle = {\"height\": \"10px\", \"width\": \"10px\", \"display\": \"block\", \"position\": \"absolute\", \"padding\": \"0px\"};\nvar computerStyle = {\"height\": \"10px\", \"width\": \"10px\", \"display\": \"block\", \"position\": \"absolute\", \"padding\": \"0px\"};\n\nconst ROCK = \"Rock\";\nconst PAPER = \"Paper\";\nconst SCISSORS = \"Scissors\";\nconst LIZARD = \"Lizard\";\nconst SPOCK = \"Vulcan\";\n\nconst playItems = [ROCK, PAPER, SCISSORS, LIZARD, SPOCK];\n\n//  Computer: [Rock, Paper, Scissors, Lizard, Spock]\nconst rulesTable = [\n    [null, \"Computer\", \"Human\", \"Human\", \"Computer\"], // Rock\n    [\"Human\", null, \"Computer\", \"Computer\", \"Human\"], // Paper\n    [\"Computer\", \"Human\", null, \"Human\", \"Computer\"], // Scissors\n    [\"Human\", \"Human\", \"Computer\", null, \"Computer\"], // Lizard\n    [\"Human\", \"Computer\", \"Human\", \"Computer\", null] // Spock\n];\n\nfunction start(props) {\n    window.setInterval(function() {\n        var idx = Math.floor(Math.random() * playItems.length);\n        var name = playItems[idx];\n        props.onSelect(name);\n    }, 800);\n}\n\nconst Playables = props => {\n    var humanPlayColumn = props.gameState[2].indexOf(1), \n    computerCodeColumn = props.gameState[3].indexOf(1);\n    var hwin = props.gameState[0].reduce((accumulator, currentValue) => accumulator + currentValue)\n    var cwin = props.gameState[1].reduce((accumulator, currentValue) => accumulator + currentValue);\n    return (\n        <div className=\"container\">\n            <div className=\"clearfix\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <button className=\"btn btn-primary\" onClick={() => start(props)}>Game Start</button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {playItems.map((name, index) => {\n                        var filename = \"images/icon-\" + name + \".png\";\n                        var key = \"button-\" + name, humanClassName = \"\", computerClassName = \"\";\n                        if(playItems.indexOf(name) === humanPlayColumn) {\n                            humanClassName = \"bg-success\";\n                        }\n                        if(playItems.indexOf(name) === computerCodeColumn) {\n                            computerClassName = \"bg-danger\";\n                        }\n                        return (\n                            <div className=\"col col-lg-2\" key={key}>\n                                <button style={style} \n                                type=\"button\" className=\"btn btn-primary btn-lg btn-block\" key={index} item={name} onClick={() => \n                                    props.onSelect(name)\n                                }>\n                                    {name}&nbsp;\n                                    <img src={filename} alt=\"icon\" />\n                                    <span style={humanStyle} className={humanClassName}></span>\n                                    <span style={computerStyle} className={computerClassName}></span>\n                                </button>\n                            </div>\n                        );\n                    })}\n                </div>\n                <div className=\"text-center mt-5\">\n                    <p>\n                    <i>Human Wins <span style={{\"fontStyle\": \"bold\", \"color\": \"green\", \"height\": \"16px\", \"width\": \"16px\"}}>{hwin}</span> times</i><br/>\n                    <i>Computer Wins <span style={{\"fontStyle\": \"bold\", \"color\": \"red\", \"height\": \"16px\", \"width\": \"16px\"}}>{cwin}</span> times</i>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport { \n    Playables, \n    rulesTable, \n    playItems \n};","import { combineReducers } from \"redux\";\nimport {\n  EVALUATE_GAME_ITEM\n} from \"../constants/constants.js\";\nimport { playItems } from '../components/Playables.js';\n\nvar stateData = [];\n\nfor(var i = 0; i < playItems.length - 1; i++) {\n    stateData.push([0, 0, 0, 0, 0]);\n}\n\nconst gameState = (state = stateData, action) => {\n    switch (action.type) {\n        case EVALUATE_GAME_ITEM:\n            var stateCopy = [];\n            var evaluate = action.evaluate(action.item.code);\n            for(var s in state) {\n                stateCopy.push([...state[s]]);\n            }\n            stateCopy[2] = [0,0,0,0,0]; // human\n            stateCopy[2][playItems.indexOf(action.item.name)] = 1;\n            stateCopy[3] = [0,0,0,0,0]; // computer\n            stateCopy[3][action.item.code] = 1;\n            if(evaluate === \"Human\") {\n                stateCopy[0][playItems.indexOf(action.item.name)] += action.item.point;\n            } else if(evaluate === \"Computer\") {\n                stateCopy[1][action.item.code] += action.item.point;\n            }\n            return stateCopy;\n            break;\n        default:\n            return state;\n            break;\n    }\n};\n\nconst reducer = combineReducers({\n    gameState\n});\n\nexport default reducer;","import { EVALUATE_GAME_ITEM } from \"../constants/constants.js\";\nimport { playItems, rulesTable } from '../components/Playables.js';\n\nconst evaluateGamePlay = (name) => {\n    return {\n      type: EVALUATE_GAME_ITEM,\n      item: {\n        code: Math.ceil(Math.random() * playItems.length) - 1,\n        name: name,\n        point: 1\n      },\n      evaluate: function(code) {\n          if(name === playItems[code]) {\n              return 0;\n          }\n          return rulesTable[playItems.indexOf(name)][code];\n      }\n    };\n  };\n  \n  export default evaluateGamePlay;","import { connect } from \"react-redux\";\nimport { Playables } from './../components/Playables.js';\nimport evaluateGamePlay from '../actions/evaluateGamePlay.js';\n\nconst mapStateToProps = state => {\n    return {\n        gameState: state.gameState\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSelect: (name) => {\n            dispatch(evaluateGamePlay(name));\n        }\n    };\n};\n\nconst GameContainer = connect(mapStateToProps, mapDispatchToProps)(\n    Playables\n);\n\n\nexport default GameContainer;","import React from \"react\";\nimport GameContainer from '../container/GameContainer.js';\n\nconst Game = () => {\n    return (\n        <div className=\"clearfix mt-5\">\n            <GameContainer />\n        </div>\n    );\n};\n\nexport default Game;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Game from './components/Game.js';\n\nvar style = {\"backgroundColor\": \"blue\", \"height\": \"150px\", \"color\": \"white\"};\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <header className=\"row\" style={style}>\n        <h2 className=\"mx-auto mt-5\">Game - Rock Paper Scissors Lizard Spock</h2>\n      </header>\n      <section>\n        <Game />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers/reducer.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","const EVALUATE_GAME_ITEM = \"EVALUATE_GAME_ITEM\";\n\nmodule.exports = {\n  EVALUATE_GAME_ITEM\n};\n"],"sourceRoot":""}